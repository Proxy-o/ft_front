version: "3"
services:
  nginx:
    container_name: nginx_container
    build:
      context: nginx
      dockerfile: Dockerfile
    ports:
      - "443:443"
    networks:
      - mynetwork
    depends_on:
      - backend
      - frontend
      - vault

  db:
    container_name: postgres_container
    image: postgres:13-alpine3.20
    env_file:
      - .env
    volumes:
      - ./postgres:/data/postgres
    networks:
      - mynetwork
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    container_name: backend_container
    build:
      context: ./backend
      dockerfile: Dockerfile
    networks:
      - mynetwork
    volumes:
      - ./backend:/app
    env_file:
      - .env
    stop_grace_period: 10s
    depends_on:
      db:
        condition: service_healthy

  frontend:
    container_name: frontend_container
    build:
      context: .
      dockerfile: ./frontend/Dockerfile
    volumes:
      - ./frontend:/app:cached  # Mount the code directory
      - /app/node_modules        # Ensure node_modules is not overwritten by host
    networks:
      - mynetwork
    depends_on:
      - backend

  vault:
    container_name: vault_container
    image: hashicorp/vault:1.7
    ports:
      - "8200:8200"
      - "8201:8201"
    networks:
      - mynetwork
    volumes:
      - ./vault_data:/vault/file
    cap_add:
      - IPC_LOCK
    command: server -dev -dev-root-token-id="root"
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: root
      VAULT_DEV_LISTEN_ADDRESS: "0.0.0.0:8200"
    entrypoint: ["/bin/sh", "-c", "/vault/file/entrypoint.sh"]

networks:
  mynetwork:
    driver: bridge

volumes:
  vault_data: